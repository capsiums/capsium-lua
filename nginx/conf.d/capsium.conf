# Capsium Nginx Configuration

# Initialize Capsium module
init_by_lua_block {
    local capsium = require "capsium"

    -- Configure Capsium
    local config = {
        package_dir = "/var/lib/capsium/packages",
        extract_dir = "/var/lib/capsium/extracted",
        cache_enabled = true,
        cache_ttl = 3600,  -- 1 hour
        log_level = "info"
    }

    -- Initialize the module
    local ok, err = capsium.init(config)
    if not ok then
        ngx.log(ngx.ERR, "Failed to initialize Capsium: ", err)
    end
}

# Capsium package server
server {
    listen 80;
    server_name localhost;

    # Root directory for static files
    root /var/lib/capsium/static;

    # Capsium package handler
    location ~ ^/capsium/([^/]+)(/.*)$ {
        set $capsium_package $1;
        set $capsium_path $2;

        # Rewrite the URI to just the path part
        rewrite ^/capsium/[^/]+(.*)$ $1 break;

        # Handle the request with Capsium
        content_by_lua_block {
            local capsium = require "capsium"
            capsium.handle_request()
        }

        # Internal location for serving files
        location @capsium_serve_file {
            internal;
            root /;
            try_files $capsium_file_path =404;
        }
    }

    # Capsium API for introspection
    location /api/v1/introspect {
        content_by_lua_block {
            local capsium = require "capsium"
            local cjson = require "cjson"

            local path = ngx.var.uri:sub(17)  -- Remove /api/v1/introspect

            if path == "/metadata" then
                -- Return metadata for all packages
                local metadata = capsium.get_metadata()
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(metadata))
            elseif path == "/routes" then
                -- Return routes for all packages
                local routes = capsium.get_routes()
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(routes))
            elseif path == "/content-hashes" then
                -- Return content hashes for all packages
                local hashes = capsium.get_content_hashes()
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(hashes))
            elseif path == "/content-validity" then
                -- Return content validity for all packages
                local validity = capsium.get_content_validity()
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(validity))
            else
                ngx.status = 404
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode({ error = "Not found" }))
            end
        }
    }

    # Default location
    location / {
        try_files $uri $uri/ =404;
    }
}
